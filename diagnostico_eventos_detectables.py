#!/usr/bin/env python3
"""
Script de Diagn√≥stico: Eventos Detectables por InterpretadorRAG
================================================================

Este script analiza qu√© eventos puede detectar el interpretador RAG
cargando los mismos t√≠tulos objetivo que usa el sistema en producci√≥n.

Prop√≥sito: Investigar por qu√© "Sol conjunci√≥n Lilith" no aparece en interpretaciones.

Autor: Cline AI Assistant
Fecha: 8 de Julio, 2025
"""

import sys
import os
import re
from pathlib import Path
from collections import defaultdict

def load_target_titles_from_file(filepath):
    """
    Cargar y procesar t√≠tulos desde archivo MD
    (Copia exacta del m√©todo usado en interpretador_refactored.py)
    """
    target_titles = set()
    aspect_keywords = ["conjunci√≥n", "oposici√≥n", "cuadratura", "tr√≠gono", "sextil"]
    
    try:
        path_obj = Path(filepath)
        if not path_obj.is_file():
            raise FileNotFoundError(f"Archivo no encontrado: {filepath}")

        with path_obj.open('r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                match_header = re.match(r"^(?:### |#### )\s*\d+(?:\.\d+)*\s+(.*)", line)
                match_retrograde = re.match(r"^## \d+\.\d+\s+([A-Z√Å√â√ç√ì√ö√ú√ë]+\s+RETR√ìGRADO)", line)
                title_to_process = None

                if match_header:
                    title_to_process = match_header.group(1).strip()
                elif match_retrograde:
                    title_to_process = match_retrograde.group(1).strip()
                elif re.match(r"^[A-Z\s]+ RETR√ìGRADO", line):
                    title_to_process = line.strip()

                if title_to_process:
                    normalized_title = re.sub(r'\s*\(\d+¬∞.*?\)', '', title_to_process)
                    normalized_title = re.sub(r':.*', '', normalized_title)
                    normalized_title = normalized_title.lower()
                    normalized_title = re.sub(r'\s+', ' ', normalized_title).strip()
                    normalized_title = normalized_title.replace(" en casa dos", " en casa 2")

                    is_relevant = (
                        normalized_title.startswith("aspecto ") or
                        " en " in normalized_title or
                        normalized_title.endswith(" retr√≥grado") or
                        " en el ascendente" in normalized_title
                    )

                    if is_relevant:
                        if normalized_title.startswith("aspecto "):
                            match_aspect = re.match(r"aspecto\s+([a-z√°√©√≠√≥√∫√º√±]+)\s+(.*?)\s+a\s+([a-z√°√©√≠√≥√∫√º√±]+)", normalized_title)
                            if match_aspect:
                                planet1 = match_aspect.group(1)
                                aspect_part = match_aspect.group(2)
                                planet2 = match_aspect.group(3)

                                found_aspects = [kw for kw in aspect_keywords if kw in aspect_part.split()]

                                if found_aspects:
                                    for asp in found_aspects:
                                        specific_title = f"aspecto {planet1} {asp} a {planet2}"
                                        target_titles.add(specific_title)
                                        # Guardar info adicional para debugging
                                        if hasattr(target_titles, '_debug_info'):
                                            target_titles._debug_info.append({
                                                'line': line_num,
                                                'original': line,
                                                'processed': specific_title,
                                                'planet1': planet1,
                                                'aspect': asp,
                                                'planet2': planet2
                                            })
                                else:
                                    target_titles.add(normalized_title)
                            else:
                                target_titles.add(normalized_title)
                        else:
                            target_titles.add(normalized_title)

        return target_titles
        
    except Exception as e:
        print(f"‚ùå Error al leer archivo de t√≠tulos '{filepath}': {e}")
        return None

def categorize_titles(titles):
    """Categorizar t√≠tulos por tipo"""
    categories = defaultdict(list)
    
    for title in sorted(titles):
        if title.startswith("aspecto "):
            categories["Aspectos"].append(title)
        elif " en casa " in title:
            categories["Planetas en Casas"].append(title)
        elif " en " in title and " casa " not in title:
            categories["Planetas en Signos"].append(title)
        elif title.endswith(" retr√≥grado"):
            categories["Planetas Retr√≥grados"].append(title)
        elif " en el ascendente" in title:
            categories["Planetas en Ascendente"].append(title)
        else:
            categories["Otros"].append(title)
    
    return categories

def search_lilith_titles(titles):
    """Buscar espec√≠ficamente t√≠tulos relacionados con Lilith"""
    lilith_titles = []
    for title in sorted(titles):
        if "lilith" in title.lower():
            lilith_titles.append(title)
    return lilith_titles

def search_specific_patterns(titles):
    """Buscar patrones espec√≠ficos para debugging"""
    patterns = {
        "sol_conjuncion_lilith_con_a": "aspecto sol conjunci√≥n a lilith",
        "sol_conjuncion_lilith_sin_a": "aspecto sol conjunci√≥n lilith",
        "marte_conjuncion_pluton": "aspecto marte conjunci√≥n plut√≥n",
        "marte_conjuncion_pluton_con_a": "aspecto marte conjunci√≥n a plut√≥n"
    }
    
    results = {}
    for pattern_name, pattern in patterns.items():
        results[pattern_name] = pattern in titles
    
    return results

def generate_report(titles, categories, lilith_titles, patterns):
    """Generar reporte completo"""
    report = []
    report.append("=" * 80)
    report.append("DIAGN√ìSTICO: EVENTOS DETECTABLES POR INTERPRETADOR RAG")
    report.append("=" * 80)
    report.append(f"Fecha: {os.popen('date').read().strip()}")
    report.append(f"Total de t√≠tulos objetivo cargados: {len(titles)}")
    report.append("")
    
    # Estad√≠sticas por categor√≠a
    report.append("üìä ESTAD√çSTICAS POR CATEGOR√çA")
    report.append("-" * 40)
    for category, items in categories.items():
        report.append(f"{category}: {len(items)} t√≠tulos")
    report.append("")
    
    # B√∫squeda espec√≠fica de patrones
    report.append("üîç B√öSQUEDA DE PATRONES ESPEC√çFICOS")
    report.append("-" * 40)
    for pattern_name, found in patterns.items():
        status = "‚úÖ ENCONTRADO" if found else "‚ùå NO ENCONTRADO"
        report.append(f"{pattern_name}: {status}")
    report.append("")
    
    # T√≠tulos de Lilith
    report.append("üåô T√çTULOS RELACIONADOS CON LILITH")
    report.append("-" * 40)
    if lilith_titles:
        for title in lilith_titles:
            report.append(f"  ‚Ä¢ {title}")
    else:
        report.append("  ‚ùå No se encontraron t√≠tulos de Lilith")
    report.append("")
    
    # Lista completa por categor√≠a
    report.append("üìã LISTA COMPLETA DE T√çTULOS POR CATEGOR√çA")
    report.append("-" * 50)
    for category, items in categories.items():
        report.append(f"\n### {category.upper()} ({len(items)} t√≠tulos)")
        for item in items:
            report.append(f"  ‚Ä¢ {item}")
    
    return "\n".join(report)

def main():
    """Funci√≥n principal"""
    print("üîç Iniciando diagn√≥stico de eventos detectables...")
    
    # Ruta al archivo de t√≠tulos (misma que usa el interpretador)
    titles_file = "../astro_interpretador_rag_fastapi/data/T√≠tulos Numerados tropico.md"
    
    if not os.path.exists(titles_file):
        print(f"‚ùå Error: No se encontr√≥ el archivo {titles_file}")
        sys.exit(1)
    
    print(f"üìÑ Cargando t√≠tulos desde: {titles_file}")
    
    # Cargar t√≠tulos usando el mismo m√©todo que el interpretador
    titles = load_target_titles_from_file(titles_file)
    
    if not titles:
        print("‚ùå Error: No se pudieron cargar los t√≠tulos")
        sys.exit(1)
    
    print(f"‚úÖ T√≠tulos cargados: {len(titles)}")
    
    # Analizar t√≠tulos
    print("üìä Categorizando t√≠tulos...")
    categories = categorize_titles(titles)
    
    print("üåô Buscando t√≠tulos de Lilith...")
    lilith_titles = search_lilith_titles(titles)
    
    print("üîç Buscando patrones espec√≠ficos...")
    patterns = search_specific_patterns(titles)
    
    # Generar reporte
    print("üìù Generando reporte...")
    report = generate_report(titles, categories, lilith_titles, patterns)
    
    # Guardar reporte
    report_file = "diagnostico_eventos_detectables_reporte.txt"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"‚úÖ Reporte guardado en: {report_file}")
    
    # Mostrar resumen en consola
    print("\n" + "=" * 60)
    print("RESUMEN EJECUTIVO")
    print("=" * 60)
    print(f"Total t√≠tulos: {len(titles)}")
    print(f"T√≠tulos de Lilith: {len(lilith_titles)}")
    
    print("\nPatrones cr√≠ticos:")
    for pattern_name, found in patterns.items():
        status = "‚úÖ" if found else "‚ùå"
        print(f"  {status} {pattern_name}")
    
    if lilith_titles:
        print(f"\nT√≠tulos de Lilith encontrados:")
        for title in lilith_titles:
            print(f"  ‚Ä¢ {title}")
    
    print(f"\nüìÑ Ver reporte completo en: {report_file}")

if __name__ == "__main__":
    main()
